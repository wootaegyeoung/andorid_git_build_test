name: Build & Release Android APK

on:
  push:
    tags: ['v*.*.*']         # 태그 push일 때 실행 (예: v1.2.3)
  workflow_dispatch:          # (옵션) 수동 실행 허용 — 원치 않으면 이 줄 삭제

permissions:
  contents: write

env:
  ANDROID_COMPILE_SDK: 35
  ANDROID_BUILD_TOOLS: 35.0.0
  JAVA_VERSION: '17'
  APP_DIR: .
  APP_MODULE_PATH: app

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Build Tools & Platform
        run: |
          sdkmanager --install "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" "platforms;android-${{ env.ANDROID_COMPILE_SDK }}"

      # Keystore 복원: 시크릿이 있으면 복원, 없으면 스킵(무서명 빌드)
      - name: Restore keystore (skip if secret is empty)
        run: |
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            echo "Keystore secret found. Restoring..."
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > my-release.keystore
            ls -l my-release.keystore
          else
            echo "No ANDROID_KEYSTORE_BASE64 provided. Skipping keystore restore."
          fi
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Make gradlew executable
        run: chmod +x gradlew
        working-directory: ${{ env.APP_DIR }}

      - name: Compute version (from tag or manual)
        id: ver
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"   # v 접두어 제거
            TAG="${GITHUB_REF_NAME}"
          else
            VERSION="$(date +'%Y%m%d.%H%M')-manual"
            TAG="manual-${VERSION}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build release APK
        run: |
          # keystore가 복원된 경우에만 경로 export
          if [ -f "$GITHUB_WORKSPACE/my-release.keystore" ]; then
            export KEYSTORE_PATH="$GITHUB_WORKSPACE/my-release.keystore"
          fi
          ./gradlew clean :${{ env.APP_MODULE_PATH }}:assembleRelease \
            -PversionName='${{ steps.ver.outputs.version }}' \
            -PversionCode='${{ github.run_number }}'
        working-directory: ${{ env.APP_DIR }}
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS:         ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD:      ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Upload workflow artifact (APK)
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ steps.ver.outputs.version }}
          path: ${{ env.APP_DIR }}/${{ env.APP_MODULE_PATH }}/build/outputs/apk/release/*.apk
          if-no-files-found: error

      # 태그일 때만 릴리즈 생성 + APK 첨부
      - name: Create GitHub Release (tag only)
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          files: ${{ env.APP_DIR }}/${{ env.APP_MODULE_PATH }}/build/outputs/apk/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
